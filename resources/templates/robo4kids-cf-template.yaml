Description: 

    This template deploys the required resources for the AWS RoboMaker Workshops. This includes the following - 
    a VPC, with a pair of public subnets spread across two Availability Zones, 
    an Internet Gateway, with a default route on the public subnets,
    a s3 bucket for bundles and other assets,
    IAM roles for simulation and deployment.

Parameters:

    s3BucketName:
        Description: Please enter the bucket name for your RoboMaker assets. This must be unique and use only lowercase characters, '.' or '-'.
        Type: String
        AllowedPattern: '[a-z0-9+-.]*'
        Default: robo4kids-deploy

    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.168.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.168.10.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.168.11.0/24
    
    PublicSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the third Availability Zone
        Type: String
        Default: 10.168.12.0/24


Resources:

    VPC: 
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags: 
                - Key: Name 
                  Value: !Ref AWS::StackName

    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref AWS::StackName

    InternetGatewayAttachment:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    S3Bucket:
        Type: 'AWS::S3::Bucket'
        Properties:
          BucketName: !Sub ${s3BucketName}-${AWS::Region}-rmw-assets

    PublicSubnet1: 
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${AWS::StackName} ${AWS::Region} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${AWS::StackName} ${AWS::Region} Public Subnet (AZ2)
    
    PublicSubnet3: 
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet3CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${AWS::StackName} ${AWS::Region} Public Subnet (AZ3)

    PublicRouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${AWS::StackName} ${AWS::Region} Public Routes

    DefaultPublicRoute: 
        Type: 'AWS::EC2::Route'
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
    
    PublicSubnet3RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet3

    RoboMakerSimulationRole:
        Type: 'AWS::IAM::Role'
        Properties:
          RoleName: !Sub robomaker-simulation-role-${AWS::Region}
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Principal:
                  Service:
                    - robomaker.amazonaws.com
                Action:
                  - sts:AssumeRole
          ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
            - 'arn:aws:iam::aws:policy/AWSRoboMaker_FullAccess'
            - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
            - 'arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess'
            - 'arn:aws:iam::aws:policy/AmazonRekognitionFullAccess'

    RoboMakerDeploymentRole:
        Type: 'AWS::IAM::Role'
        Properties:
          RoleName: !Sub robomaker-deployment-role-${AWS::Region}
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                    - iot.amazonaws.com
                    - greengrass.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy'
            - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
            - 'arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess'
            - 'arn:aws:iam::aws:policy/AmazonRekognitionFullAccess'
            - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
            - 'arn:aws:iam::aws:policy/AWSRoboMaker_FullAccess'
    
    Instance:
        Type: 'AWS::EC2::Instance'
        Properties:
          ImageId: 'ami-0ee3b9f931752ed1c'
          InstanceType: 'm4.large'
          UserData: ''
          Tags:
            - Key: Name 
              Value: !Sub ${AWS::StackName} ${AWS::Region} RoboMaker
          NetworkInterfaces:
            - AssociatePublicIpAddress: true
              DeviceIndex: 0
              SubnetId: !Ref PublicSubnet1
              GroupSet: 
                - !Ref InstanceSecurityGroup

    InstanceSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
          GroupDescription: 'Security group for Cloud9 RoboMaker Env'
          VpcId: !Ref VPC
          SecurityGroupIngress:
            - FromPort: '22'
              ToPort: '22'
              IpProtocol: tcp
              CidrIp: 35.172.155.192/27
            - FromPort: '22'
              ToPort: '22'
              IpProtocol: tcp
              CidrIp: 35.172.155.96/27
          Tags:
            - Key: Name 
              Value: !Sub ${AWS::StackName} ${AWS::Region} RoboMaker

Outputs: 

    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC

    DefaultSecurityGroupID: 
        Description: The default security group created with the VPC
        Value: !GetAtt VPC.DefaultSecurityGroup

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1

    PublicSubnet2: 
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2
    
    PublicSubnet3: 
        Description: A reference to the public subnet in the 3rd Availability Zone
        Value: !Ref PublicSubnet3
  
    RoboMakerS3Bucket:
        Description: The S3 bucket used to store your AWS RoboMaker assets.
        Value: !Ref S3Bucket

    SimulationRole:
        Description: The IAM role that the simulation application will use to access AWS resources.
        Value: !GetAtt RoboMakerSimulationRole.Arn
        
    DeploymentRole:
        Description: The IAM role that the robot will use to access AWS resources.
        Value: !GetAtt RoboMakerDeploymentRole.Arn

    SubmitJobSH: 
        Description: Shell script to run to export variables.
        Value: !Sub |
             #!/bin/bash
             export BUCKET_NAME="${S3Bucket}"
             export SUBNET1="${PublicSubnet1}"
             export SUBNET2="${PublicSubnet2}"
             export SUBNET3="${PublicSubnet3}"
             export SECURITY_GROUP="${VPC.DefaultSecurityGroup}"
             export ROLE_ARN="${RoboMakerSimulationRole.Arn}"
