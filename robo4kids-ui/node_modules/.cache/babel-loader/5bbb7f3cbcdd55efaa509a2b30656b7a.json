{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/antonfu/Documents/Capstone Project/Robo4Kids/roboblockly/src/components/levels/level0.js\",\n    _s = $RefreshSig$();\n\nimport './../customBlocks/directionblocks';\nimport React, { useState, useEffect } from 'react';\nimport ReactBlockly from 'react-blockly';\nimport Blockly from 'blockly'; //\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import Container from 'react-bootstrap/Container';\n// import Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col'\n\nimport RunCode from './../runCode';\nimport Amplify from 'aws-amplify';\nimport awsconfig from './../../aws-exports';\nimport { withAuthenticator } from 'aws-amplify-react'; // or 'aws-amplify-react-native';\n\nimport '@aws-amplify/ui/dist/style.css';\nimport { PubSub, Auth } from 'aws-amplify';\nimport { AWSIoTProvider } from '@aws-amplify/pubsub/lib/Providers';\nAmplify.configure(awsconfig);\nAmplify.addPluggable(new AWSIoTProvider({\n  aws_pubsub_region: 'us-west-2',\n  aws_pubsub_endpoint: 'wss://ajlhtk9kwdt15-ats.iot.us-west-2.amazonaws.com/mqtt'\n}));\n\nfunction Level0() {\n  _s();\n\n  //const initialXml = '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"text\" x=\"70\" y=\"30\"><field name=\"TEXT\"></field></block></xml>';\n  const toolboxCategories = [{\n    name: 'Direcction',\n    colour: '#5CA699',\n    blocks: [{\n      type: 'robot_direcction'\n    }, {\n      type: 'robot_forward'\n    }, {\n      type: 'robot_reverse'\n    }, {\n      type: 'robot_loop'\n    }, {\n      type: 'math_number'\n    }]\n  }];\n  const [code, setCode] = useState('');\n  const [sensor, setSensor] = useState('');\n\n  function workspaceDidChange(workspace) {\n    const newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace)); //  document.getElementById('generated-xml').innerText = newXml;\n\n    const code = Blockly.JavaScript.workspaceToCode(workspace);\n    setCode(code);\n  }\n\n  useEffect(() => //human_detection\n  PubSub.subscribe('jebot').subscribe({\n    next: data => {\n      try {\n        setSensor(data.value);\n      } catch (error) {\n        console.log(\"Error, are you sending the correct data?\");\n      }\n    },\n    error: error => console.error(error),\n    close: () => console.log('Done')\n  }), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReactBlockly, {\n      toolboxCategories: toolboxCategories,\n      wrapperDivClassName: \"fill-height\",\n      workspaceConfiguration: {\n        grid: {\n          spacing: 20,\n          length: 3,\n          colour: '#ccc',\n          snap: true\n        }\n      },\n      workspaceDidChange: workspaceDidChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RunCode, {\n      code: code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", sensor.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Level0, \"vkEKBzGoXxPvw2dNpxjOZkjsTOg=\");\n\n_c = Level0;\nexport default Level0;\n\nvar _c;\n\n$RefreshReg$(_c, \"Level0\");","map":{"version":3,"sources":["/Users/antonfu/Documents/Capstone Project/Robo4Kids/roboblockly/src/components/levels/level0.js"],"names":["React","useState","useEffect","ReactBlockly","Blockly","RunCode","Amplify","awsconfig","withAuthenticator","PubSub","Auth","AWSIoTProvider","configure","addPluggable","aws_pubsub_region","aws_pubsub_endpoint","Level0","toolboxCategories","name","colour","blocks","type","code","setCode","sensor","setSensor","workspaceDidChange","workspace","newXml","Xml","domToText","workspaceToDom","JavaScript","workspaceToCode","subscribe","next","data","value","error","console","log","close","grid","spacing","length","snap","message"],"mappings":"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","sourcesContent":["import './../customBlocks/directionblocks'\nimport React, { useState, useEffect }  from 'react'\nimport ReactBlockly from 'react-blockly'\nimport Blockly from 'blockly';\n\n//\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import Container from 'react-bootstrap/Container';\n// import Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col'\n\nimport RunCode from './../runCode';\n\nimport Amplify from 'aws-amplify';\nimport awsconfig from './../../aws-exports';\nimport { withAuthenticator } from 'aws-amplify-react'; // or 'aws-amplify-react-native';\nimport '@aws-amplify/ui/dist/style.css';\nimport { PubSub, Auth } from 'aws-amplify';\nimport { AWSIoTProvider } from '@aws-amplify/pubsub/lib/Providers';\n\nAmplify.configure(awsconfig);\n\nAmplify.addPluggable(new AWSIoTProvider({\n aws_pubsub_region: 'us-west-2',\n aws_pubsub_endpoint: 'wss://ajlhtk9kwdt15-ats.iot.us-west-2.amazonaws.com/mqtt',\n}));\n\n\n\nfunction Level0() {\n  //const initialXml = '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><block type=\"text\" x=\"70\" y=\"30\"><field name=\"TEXT\"></field></block></xml>';\n  const toolboxCategories = [\n    {\n      name: 'Direcction',\n      colour: '#5CA699',\n      blocks: [\n        {\n          type: 'robot_direcction'\n        },\n        {\n          type: 'robot_forward'\n        },\n        {\n          type: 'robot_reverse'\n        },\n\n        {\n          type: 'robot_loop'\n        },\n        {\n          type: 'math_number'\n        }\n      ]\n    },\n\n\n  ]\n  const [code, setCode] = useState('');\n  const [sensor, setSensor] = useState('');\n  function workspaceDidChange(workspace) {\n    const newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));\n  //  document.getElementById('generated-xml').innerText = newXml;\n\n    const code = Blockly.JavaScript.workspaceToCode(workspace);\n    setCode(code);\n  }\n\n   useEffect(() =>\n   //human_detection\n     PubSub.subscribe('jebot').subscribe({\n     next: data => {\n       try{\n         setSensor(data.value)\n       }\n       catch (error){\n         console.log(\"Error, are you sending the correct data?\");\n       }\n     },\n     error: error => console.error(error),\n     close: () => console.log('Done'),\n   }),[]\n );\n\n\n  return (\n    <div>\n      <ReactBlockly\n        toolboxCategories={toolboxCategories}\n        wrapperDivClassName=\"fill-height\"\n        workspaceConfiguration={{\n          grid: {\n            spacing: 20,\n            length: 3,\n            colour: '#ccc',\n            snap: true,\n          },\n        }}\n        workspaceDidChange={workspaceDidChange}\n      />\n\n      <RunCode code={code}/>\n      <p> {sensor.message}</p>\n\n    </div>\n  )\n}\n\nexport default Level0;\n"]},"metadata":{},"sourceType":"module"}