"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _immutable = _interopRequireDefault(require("immutable"));

var _BlocklyToolbox = _interopRequireDefault(require("./BlocklyToolbox"));

var _BlocklyWorkspace = _interopRequireDefault(require("./BlocklyWorkspace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BlockPropType = _propTypes.default.shape({
  type: _propTypes.default.string,
  shadow: _propTypes.default.bool,
  fields: _propTypes.default.object,
  values: _propTypes.default.object,
  statements: _propTypes.default.object,
  next: _propTypes.default.object,
  mutation: _propTypes.default.shape({
    attributes: _propTypes.default.object,
    innerContent: _propTypes.default.string
  })
});

var categoryPropsNonRecursive = {
  type: _propTypes.default.string,
  name: _propTypes.default.string,
  custom: _propTypes.default.string,
  colour: _propTypes.default.string,
  blocks: _propTypes.default.arrayOf(BlockPropType)
};

var CategoryPropType = _propTypes.default.shape(_objectSpread(_objectSpread({}, categoryPropsNonRecursive), {}, {
  categories: _propTypes.default.arrayOf(_propTypes.default.shape(categoryPropsNonRecursive))
}));

var propTypes = {
  initialXml: _propTypes.default.string,
  workspaceConfiguration: _propTypes.default.object,
  // eslint-disable-line react/forbid-prop-types
  wrapperDivClassName: _propTypes.default.string,
  toolboxCategories: _propTypes.default.arrayOf(CategoryPropType.isRequired),
  toolboxBlocks: _propTypes.default.arrayOf(BlockPropType.isRequired),
  xmlDidChange: _propTypes.default.func,
  workspaceDidChange: _propTypes.default.func,
  onImportXmlError: _propTypes.default.func,
  processToolboxCategory: _propTypes.default.func
};
var defaultProps = {
  initialXml: null,
  workspaceConfiguration: null,
  wrapperDivClassName: null,
  toolboxCategories: null,
  toolboxBlocks: null,
  xmlDidChange: null,
  workspaceDidChange: null,
  onImportXmlError: null,
  processToolboxCategory: null
};

var BlocklyEditor =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BlocklyEditor, _React$Component);

  var _super = _createSuper(BlocklyEditor);

  function BlocklyEditor() {
    var _this;

    _classCallCheck(this, BlocklyEditor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      _this.toolboxDidUpdate();

      if (_this.props.xmlDidChange) {
        if (typeof console !== 'undefined') {
          // eslint-disable-next-line no-console
          console.error('Warning: xmlDidChange is deprecated and will be removed in future versions! Please use workspaceDidChange instead.');
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "componentDidUpdate", function (prevProps) {
      if (_this.props.toolboxBlocks && !_immutable.default.fromJS(_this.props.toolboxBlocks).equals(_immutable.default.fromJS(prevProps.toolboxBlocks)) || _this.props.toolboxCategories && !_immutable.default.fromJS(_this.props.toolboxCategories).equals(_immutable.default.fromJS(prevProps.toolboxCategories))) {
        _this.toolboxDidUpdate();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toolboxDidUpdate", function () {
      var workspaceConfiguration = _this.props.workspaceConfiguration || {};

      if (_this.workspace && !workspaceConfiguration.readOnly) {
        _this.workspace.toolboxDidUpdate(_this.toolbox.getRootNode());
      }
    });

    _defineProperty(_assertThisInitialized(_this), "xmlDidChange", function (newXml) {
      if (_this.props.xmlDidChange) {
        _this.props.xmlDidChange(newXml);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "workspaceDidChange", function (workspace) {
      if (_this.props.workspaceDidChange) {
        _this.props.workspaceDidChange(workspace);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "importFromXml", function (xml) {
      return _this.workspace.importFromXml(xml);
    });

    _defineProperty(_assertThisInitialized(_this), "resize", function () {
      _this.workspace.resize();
    });

    _defineProperty(_assertThisInitialized(_this), "render", function () {
      var toolboxMode;

      if (_this.props.toolboxCategories) {
        toolboxMode = 'CATEGORIES';
      } else if (_this.props.toolboxBlocks) {
        toolboxMode = 'BLOCKS';
      }

      return (
        /*#__PURE__*/
        _react.default.createElement("div", {
          className: _this.props.wrapperDivClassName
        },
        /*#__PURE__*/
        _react.default.createElement(_BlocklyToolbox.default, {
          categories: _immutable.default.fromJS(_this.props.toolboxCategories),
          blocks: _immutable.default.fromJS(_this.props.toolboxBlocks),
          didUpdate: _this.toolboxDidUpdate,
          processCategory: _this.props.processToolboxCategory,
          ref: function ref(toolbox) {
            _this.toolbox = toolbox;
          }
        }),
        /*#__PURE__*/
        _react.default.createElement(_BlocklyWorkspace.default, {
          ref: function ref(workspace) {
            _this.workspace = workspace;
          },
          initialXml: _this.props.initialXml,
          onImportXmlError: _this.props.onImportXmlError,
          toolboxMode: toolboxMode,
          xmlDidChange: _this.xmlDidChange,
          workspaceDidChange: _this.workspaceDidChange,
          wrapperDivClassName: _this.props.wrapperDivClassName,
          workspaceConfiguration: _this.props.workspaceConfiguration
        }))
      );
    });

    return _this;
  }

  return BlocklyEditor;
}(_react.default.Component);

BlocklyEditor.propTypes = propTypes;
BlocklyEditor.defaultProps = defaultProps;
var _default = BlocklyEditor;
exports.default = _default;