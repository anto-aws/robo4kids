"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _BlocklyToolboxBlock = _interopRequireDefault(require("./BlocklyToolboxBlock"));

var _BlocklyToolboxButton = _interopRequireDefault(require("./BlocklyToolboxButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BlocklyToolboxCategory =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(BlocklyToolboxCategory, _React$PureComponent);

  var _super = _createSuper(BlocklyToolboxCategory);

  function BlocklyToolboxCategory() {
    var _this;

    _classCallCheck(this, BlocklyToolboxCategory);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "render", function () {
      var subcategories = (_this.props.categories || []).map(BlocklyToolboxCategory.renderCategory);
      var blocks = (_this.props.blocks || []).map(_BlocklyToolboxBlock.default.renderBlock);
      var buttons = (_this.props.button || []).map(_BlocklyToolboxButton.default.renderButton);
      return (
        /*#__PURE__*/
        _react.default.createElement("category", {
          name: _this.props.name,
          custom: _this.props.custom,
          colour: _this.props.colour,
          expanded: _this.props.expanded,
          is: "div"
        }, buttons, blocks, subcategories)
      );
    });

    return _this;
  }

  return BlocklyToolboxCategory;
}(_react.default.PureComponent);

_defineProperty(BlocklyToolboxCategory, "propTypes", {
  name: _propTypes.default.string,
  custom: _propTypes.default.string,
  colour: _propTypes.default.string,
  expanded: _propTypes.default.string,
  categories: _reactImmutableProptypes.default.list,
  blocks: _reactImmutableProptypes.default.list,
  button: _reactImmutableProptypes.default.list
});

_defineProperty(BlocklyToolboxCategory, "defaultProps", {
  name: null,
  custom: null,
  colour: null,
  expanded: null,
  categories: null,
  blocks: null,
  button: null
});

_defineProperty(BlocklyToolboxCategory, "renderCategory", function (category, key) {
  if (category.get('type') === 'sep') {
    return (
      /*#__PURE__*/
      _react.default.createElement("sep", {
        key: key
      })
    );
  }

  if (category.get('type') === 'search') {
    return (
      /*#__PURE__*/
      _react.default.createElement("search", {
        key: key
      })
    );
  }

  return (
    /*#__PURE__*/
    _react.default.createElement(BlocklyToolboxCategory, {
      name: category.get('name'),
      custom: category.get('custom'),
      colour: category.get('colour'),
      expanded: category.get('expanded'),
      key: key,
      blocks: category.get('blocks'),
      button: category.get('button'),
      categories: category.get('categories')
    })
  );
});

var _default = BlocklyToolboxCategory;
exports.default = _default;