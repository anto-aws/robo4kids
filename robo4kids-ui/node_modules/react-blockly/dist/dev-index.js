"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _blockly = _interopRequireDefault(require("blockly"));

var _index = _interopRequireDefault(require("./index"));

var _content = _interopRequireDefault(require("./initContent/content"));

var _BlocklyHelper = _interopRequireDefault(require("./BlocklyHelper"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TestEditor =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TestEditor, _React$Component);

  var _super = _createSuper(TestEditor);

  function TestEditor(props) {
    var _this;

    _classCallCheck(this, TestEditor);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      window.setTimeout(function () {
        _this.setState({
          toolboxCategories: _this.state.toolboxCategories.concat([{
            blocks: [{
              type: 'text'
            }, {
              type: 'text_print',
              values: {
                TEXT: {
                  type: 'text',
                  shadow: true,
                  fields: {
                    TEXT: 'abc'
                  }
                }
              }
            }]
          }])
        });
      }, 2000);
      window.setTimeout(function () {
        _this.setState({
          toolboxCategories: [].concat(_toConsumableArray(_this.state.toolboxCategories.slice(0, _this.state.toolboxCategories.length - 1)), [_objectSpread(_objectSpread({}, _this.state.toolboxCategories[_this.state.toolboxCategories.length - 1]), {}, {
            blocks: [{
              type: 'text'
            }]
          })])
        });
      }, 4000);
      window.setTimeout(function () {
        _this.setState({
          toolboxCategories: _this.state.toolboxCategories.slice(0, _this.state.toolboxCategories.length - 1)
        });
      }, 10000);
    });

    _defineProperty(_assertThisInitialized(_this), "workspaceDidChange", function (workspace) {
      workspace.registerButtonCallback('myFirstButtonPressed', function () {
        alert('button is pressed');
      });

      var newXml = _blockly.default.Xml.domToText(_blockly.default.Xml.workspaceToDom(workspace));

      document.getElementById('generated-xml').innerText = newXml;

      var code = _blockly.default.JavaScript.workspaceToCode(workspace);

      document.getElementById('code').value = code;
    });

    _defineProperty(_assertThisInitialized(_this), "render", function () {
      return (
        /*#__PURE__*/
        _react.default.createElement(_index.default, {
          toolboxCategories: _this.state.toolboxCategories,
          workspaceConfiguration: {
            grid: {
              spacing: 20,
              length: 3,
              colour: '#ccc',
              snap: true
            }
          },
          initialXml: _content.default.INITIAL_XML,
          wrapperDivClassName: "fill-height",
          workspaceDidChange: _this.workspaceDidChange
        })
      );
    });

    _this.state = {
      toolboxCategories: (0, _BlocklyHelper.default)(_content.default.INITIAL_TOOLBOX_XML)
    };
    return _this;
  }

  return TestEditor;
}(_react.default.Component);

window.addEventListener('load', function () {
  var editor =
  /*#__PURE__*/
  _react.default.createElement(TestEditor);

  _reactDom.default.render(editor, document.getElementById('blockly'));
});