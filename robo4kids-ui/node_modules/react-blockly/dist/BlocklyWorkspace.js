"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _blockly = _interopRequireDefault(require("blockly"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function debounce(func, wait) {
  var timeout;
  return function debouncedFunction() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var context = this;

    var later = function later() {
      timeout = null;
      func.apply(context, args);
    };

    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

var BlocklyWorkspace =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BlocklyWorkspace, _React$Component);

  var _super = _createSuper(BlocklyWorkspace);

  function BlocklyWorkspace(props) {
    var _this;

    _classCallCheck(this, BlocklyWorkspace);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      // TODO figure out how to use setState here without breaking the toolbox when switching tabs
      _this.state.workspace = _blockly.default.inject(_this.editorDiv, _objectSpread(_objectSpread({}, _this.props.workspaceConfiguration), {}, {
        toolbox: _this.dummyToolbox
      }));

      if (_this.state.xml) {
        if (_this.importFromXml(_this.state.xml)) {
          _this.xmlDidChange();
        } else {
          _this.setState({
            xml: null
          }, _this.xmlDidChange);
        }
      }

      _this.state.workspace.addChangeListener(_this.workspaceDidChange);

      _this.state.workspace.addChangeListener(debounce(function () {
        var newXml = _blockly.default.Xml.domToText(_blockly.default.Xml.workspaceToDom(_this.state.workspace));

        if (newXml === _this.state.xml) {
          return;
        }

        _this.setState({
          xml: newXml
        }, _this.xmlDidChange);
      }, 200));
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillReceiveProps", function (newProps) {
      if (_this.props.initialXml !== newProps.initialXml) {
        _this.setState({
          xml: newProps.initialXml
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "shouldComponentUpdate", function () {
      return false;
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillUnmount", function () {
      if (_this.state.workspace) {
        _this.state.workspace.dispose();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "importFromXml", function (xml) {
      try {
        _blockly.default.Xml.domToWorkspace(_blockly.default.Xml.textToDom(xml), _this.state.workspace);

        return true;
      } catch (e) {
        if (_this.props.onImportXmlError) {
          _this.props.onImportXmlError(e);
        }

        return false;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "xmlDidChange", function () {
      if (_this.props.xmlDidChange) {
        _this.props.xmlDidChange(_this.state.xml);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "workspaceDidChange", function () {
      if (_this.props.workspaceDidChange) {
        _this.props.workspaceDidChange(_this.state.workspace);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toolboxDidUpdate", function (toolboxNode) {
      if (toolboxNode && _this.state.workspace) {
        _this.state.workspace.updateToolbox(toolboxNode);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "resize", function () {
      _blockly.default.svgResize(_this.state.workspace);
    });

    _defineProperty(_assertThisInitialized(_this), "render", function () {
      // We have to fool Blockly into setting up a toolbox with categories initially;
      // otherwise it will refuse to do so after we inject the real categories into it.
      var dummyToolboxContent;

      if (_this.props.toolboxMode === 'CATEGORIES') {
        dummyToolboxContent =
        /*#__PURE__*/
        _react.default.createElement("category", {
          name: "Dummy toolbox",
          colour: "",
          is: "div"
        });
      }

      return (
        /*#__PURE__*/
        _react.default.createElement("div", {
          className: _this.props.wrapperDivClassName
        },
        /*#__PURE__*/
        _react.default.createElement("xml", {
          style: {
            display: 'none'
          },
          ref: function ref(dummyToolbox) {
            _this.dummyToolbox = dummyToolbox;
          },
          is: "div"
        }, dummyToolboxContent),
        /*#__PURE__*/
        _react.default.createElement("div", {
          className: _this.props.wrapperDivClassName,
          ref: function ref(editorDiv) {
            _this.editorDiv = editorDiv;
          }
        }))
      );
    });

    _this.state = {
      workspace: null,
      xml: _this.props.initialXml
    };
    return _this;
  }

  return BlocklyWorkspace;
}(_react.default.Component);

_defineProperty(BlocklyWorkspace, "propTypes", {
  initialXml: _propTypes.default.string,
  workspaceConfiguration: _propTypes.default.object,
  // eslint-disable-line react/forbid-prop-types
  wrapperDivClassName: _propTypes.default.string,
  xmlDidChange: _propTypes.default.func,
  workspaceDidChange: _propTypes.default.func,
  onImportXmlError: _propTypes.default.func,
  toolboxMode: _propTypes.default.oneOf(['CATEGORIES', 'BLOCKS'])
});

_defineProperty(BlocklyWorkspace, "defaultProps", {
  initialXml: null,
  workspaceConfiguration: null,
  wrapperDivClassName: null,
  xmlDidChange: null,
  workspaceDidChange: null,
  onImportXmlError: null,
  toolboxMode: 'BLOCKS'
});

var _default = BlocklyWorkspace;
exports.default = _default;