"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BlocklyToolboxBlock =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(BlocklyToolboxBlock, _React$PureComponent);

  var _super = _createSuper(BlocklyToolboxBlock);

  function BlocklyToolboxBlock() {
    var _this;

    _classCallCheck(this, BlocklyToolboxBlock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      if (_this.props.mutation) {
        _this.props.mutation.get('attributes').forEach(function (value, attributeName) {
          _this.mutationElement.setAttribute(attributeName, value);

          return true;
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "render", function () {
      var fields = [];
      var values = [];
      var statements = [];
      var mutation = null;
      var nextBlock = null;

      if (_this.props.fields) {
        fields = _this.props.fields.map(function (fieldValue, fieldName, i) {
          return (
            /*#__PURE__*/
            _react.default.createElement("field", {
              name: fieldName,
              key: "field_".concat(fieldName, "_").concat(i),
              is: "div"
            }, fieldValue)
          );
        }).valueSeq();
      }

      if (_this.props.values) {
        values = _this.props.values.map(function (valueBlock, valueName, i) {
          return (
            /*#__PURE__*/
            _react.default.createElement("value", {
              name: valueName,
              key: "value_".concat(valueName, "_").concat(i),
              is: "div"
            }, BlocklyToolboxBlock.renderBlock(valueBlock))
          );
        }).valueSeq();
      }

      if (_this.props.statements) {
        statements = _this.props.statements.map(function (statementBlock, statementName, i) {
          return (
            /*#__PURE__*/
            _react.default.createElement("statement", {
              name: statementName,
              key: "statement_".concat(statementName, "_").concat(i),
              is: "div"
            }, BlocklyToolboxBlock.renderBlock(statementBlock))
          );
        }).valueSeq();
      }

      if (_this.props.mutation) {
        mutation =
        /*#__PURE__*/
        _react.default.createElement("mutation", {
          // eslint-disable-next-line react/no-danger
          dangerouslySetInnerHTML: {
            __html: _this.props.mutation.get('innerContent')
          },
          ref: function ref(mutationElement) {
            _this.mutationElement = mutationElement;
          },
          is: "div"
        });
      }

      if (_this.props.next) {
        nextBlock =
        /*#__PURE__*/
        _react.default.createElement("next", {
          is: "div"
        }, BlocklyToolboxBlock.renderBlock(_this.props.next));
      }

      if (_this.props.shadow) {
        return (
          /*#__PURE__*/
          _react.default.createElement("shadow", {
            type: _this.props.type,
            is: "div"
          }, mutation, fields, values, statements, nextBlock)
        );
      }

      return (
        /*#__PURE__*/
        _react.default.createElement("block", {
          type: _this.props.type,
          is: "div"
        }, mutation, fields, values, statements, nextBlock)
      );
    });

    return _this;
  }

  return BlocklyToolboxBlock;
}(_react.default.PureComponent);

_defineProperty(BlocklyToolboxBlock, "propTypes", {
  type: _propTypes.default.string.isRequired,
  shadow: _propTypes.default.bool,
  fields: _reactImmutableProptypes.default.map,
  values: _reactImmutableProptypes.default.map,
  statements: _reactImmutableProptypes.default.map,
  next: _reactImmutableProptypes.default.map,
  mutation: _reactImmutableProptypes.default.mapContains({
    attributes: _reactImmutableProptypes.default.map,
    innerContent: _propTypes.default.string
  })
});

_defineProperty(BlocklyToolboxBlock, "defaultProps", {
  shadow: false,
  fields: null,
  values: null,
  statements: null,
  next: null,
  mutation: null
});

_defineProperty(BlocklyToolboxBlock, "renderBlock", function (block, key) {
  return (
    /*#__PURE__*/
    _react.default.createElement(BlocklyToolboxBlock, {
      type: block.get('type'),
      key: key,
      fields: block.get('fields'),
      values: block.get('values'),
      statements: block.get('statements'),
      mutation: block.get('mutation'),
      shadow: block.get('shadow'),
      next: block.get('next')
    })
  );
});

var _default = BlocklyToolboxBlock;
exports.default = _default;